
=====================================================
=====================================================
HÖCHSTE PRIORITÄT
=====================================================
=====================================================
Umbau der Console sodass:
 - GUI-/CLI-Betrieb möglich wird (stärkere Controllerabstraktion)
 - Backends in eigenen Thread, damit Threaded-Fifo als alternativer
   Datentransport für Feldbus möglich wird
 - Controller erweitern, sodass mehrere Verbindungen gleichzeitig
   geöffnet werden können
 - Kompression ist unbedingt mit in die Überlegungen einzubeziehen!
 - in dem Zusammenhang auch die Backend-Hierarchie erweitern und
   Interface-Verletzungen eliminieren, soweit praktikabel
   (siehe Backends)


=====================================================
=====================================================
MEDIUM PRIORITÄT
=====================================================
=====================================================

Backends
-----------------------------
von BaseBackend IODeviceBackend ableiten und
BaseBackend wieder entschlacken --> enthält zuviel
Funktionalität was auf QIODevice zugeschnitten ist und macht das
eigentliche Interface zu unübersichtlich

Außerdem ist es unglücklich, dass die abgeleiteten Backends teilweise
stream_ direkt manipulieren, das sollte nicht notwendig sein, da
es das Interface verwässert.

Unbedingt wieder die Unterscheidung in sequential/non-sequential
einführen und Frontends bereitstellen! Es ist nicht möglich, beide
Datenquellen-Typen in einem Abwasch zu behandeln und für manche
Frontends ist dies eine kritische Information.
(Was die Frage aufwirft was passiert, wenn mehrere Verbindungen
parallel geöffnet werden und seqentielle mit nicht-sequentiellen
Datenquellen vermischt werden. Aber wahrscheinlich sollte man das
wie so oft den Frontends selbst überlassen. Und in den meisten
Fällen würde so ein Szenario auch überhaupt keinen Sinn machen.)


Deployment
---------------------------------------
mal versuchen Linux-Binaries mit Libs + Start-Skript bereitzustellen
http://doc.qt.io/qt-5/linux-deployment.html
-->https://intern.turag.de/forum/viewtopic.php?f=62&t=832&start=30#p17596
scheint sich ganz gut zu eignen

Angepeilte Qt-Version: 5.5.1:
 - wegen Verfügbarkeit von qInfo
 - in Ubuntu 16.04 als Paket

Evt. auch Qt 5.6 wegen LTS-Support?
- wegen offiziellem Windows 10-Support
--> auf 5.6.1 warten.



Plugin-Modell
-------------------------------------------
Frontends und Backends als Plugins dynamisch laden


Frontends
-----------------------------
 - Raw-Frontend erweitern: bis zum Hterm-Ersatz
 - Stmcam-Frontend in TinA-Frontend integrieren -> gehört zur Roboteransicht
 - Suche im Terminal-Frontend/Plaintextfrontend
 - Plaintext-Frontend und Terminal-Frontend trennen -> wenn möglich Terminal von plaintext erben lassen? Prüfen,
   ob Plaintext-Frontend überhaupt notwendig, oder ob überall Terminal-Frontend benutzt werden kann
 - Scrolling im Terminal/plaintextfrontend mit Shift+Cursor Up/Down, sowie Page Up/Down
 - Farben im Roboterfrontend
 - flexiblere Möglichkeiten Logquellen im Logview zu filtern
 - Filtern nach Log-Typ im LogView
 - Informationen einblenden (wieviele Zeilen insgesamt, wieviele gefiltert...)


DataGraph/Graphenausgabe
--------------------------------------------------------
 - Performance optimieren (angeblich bei hohen Update-Frequenzen nicht mehr benutzbar)
 - CSV-Export
 - CodeBasis bisschen aufräumen, dokumentieren, Features vervollständigen
 - komische Bugs beim hervorheben fixen
 - Datentabelle optimieren
 - 3D-Graphen anzeigbar machen/Zeitinfo in 2D-Plots
 - Ausgabe von binären Kanälen ermöglichen um Bandbreite zu sparen (TinA-Debug)
 - Auswahl der ChannelGroups in Datagraph übernehmen und mit Checkboxen umsetzen
 - vertikale Marker ebenfalls in DataGraph integrieren oder Support vielleicht
   ganz fallen lassen (braucht ja keiner)
 - im TinA-Frontend Auswahl und Anzeige mehrerer Graphen ermöglichen
 - Navigations-Tools optimieren: Zoom/Drag wie in Eagle, GraphPanner entfernen
 - für beide y-Achsen unabhängigen autoZoom ermöglichen
 - tooltip über ChannelButtons, um das mit der rechten y-Achse zu erklären

erstmal nicht so wichtig:
 - Sich irgendwas mit den Icons einfallen lassen, also wie man die Menüeinträge auch als Icon anzeigen kann
   und ob das überhaupt sinnvoll ist.
 - prüfen, ob statt qwt QCustomPlot benutzt werden könnte (weniger Abhängigkeiten, einfacheres
   compilen)


Interface-Overhaul
--------------------------------------------------
es scheint nicht klar zu sein, wie das ganze System der Console
funktioniert, "Neu Sitzung öffnen" sollte eher sowas wie "Verbindung ändern"
werden und eher so einen Popup-Charakter bekommen

es wäre cool, wenn die Console sich beim Öffnen einer neuen Verbindung
intelligenter verhalten würde und nicht immer dumm das letzte Frontend
öffnen würde. Möglichkeiten:
 - speichern, mit welchem Frontend eine bestimmte URL geöffnet wurde
 - einem Backend ein bestimmtes Standard-Frontend zuordnen
--> beides mit eigenen Vor- und Nachteilen

Hamburger-Menü mit großen Icons wie in Firefox

Frontend-menü auch mit großen Icons

Adressleiste mit Autocompletion-Feature wie in Browsern. Dafür evt.:
http://www.qtcentre.org/threads/27777-Customize-QListWidgetItem-how-to
Für den Anfang könnte auch die Standard-ComboBox reichen. Man muss sich Gedanken
machen, wie man am besten die Daten speichert.

Idee: Favoriten/Lesezeichen wie in einem Browser, die besonders prominent
gelistet werden.

Vielfacher Wunsch: Tab-Unterstützung. Macht vor allem Sinn, wenn man einen Tab
in ein neues Fenster ziehen kann. Ist aber etwas aufwendiger

Connection-Widget noch klarer herausstellen



Mehrere Datenquellen gleichzeitig öffnen
-----------------------------------------------------
Prinzipiell wäre es kein Problem, mehrere Datenquellen parallel zu öffnen.
Ist die Frage, was man dann damit macht. Man könnte einfach die Daten beider
Quellen, so wie sie ankommen, ans Frontend weiterleiten. Das würde aber schon
problematisch werden, wenn man ein SC- und ein MC-Log öffnet.

Die Forderung kommt ja auch nur, weil man gern verschiedene Logs gleichzeitig betrachten können möchte.
--> prüfen ob sich das mit dem generischen Anspruch der Console vereinbaren lässt.

Wahrscheinlich ist folgender Ansatz am sinnvollsten: Es können beliebig viele Datenquellen
geöffnet werden und es ist dem Frontend überlassen, was es mit den Daten macht.
--> das verspielt allerdings die Möglichkeit, verschiedene Frontends parallel zu betreiben
--> was praktisch betrachtet aber kein Nachteil ist, da die meisten Frontends so verschieden
sind, dass sich da kein wirklicher Vorteil erkennen lässt...
--> Also wäre wohl zB das RoboterFrontend in der Lage, mit mehreren Datenstreams zu arbeiten.

--> Sowas bringt aber unheimlich viel Mehraufwand. Das gesamte Interface müsste für
mehrere Verbindungen ausgebaut werden. Und irgendwie muss das ganze auch noch intuitiv
und angenehm bedienbar bleiben.

Am einfachsten erscheint mir folgendes: ein Multiplex-Backend, was beliebig viele konventionelle Backends
öffnen kann. Die Datenstöme aller Datenquellen werden kombiniert.
Sämtliche Logik steckt im Backend, was, ähnlich dem Controller, das öffnen der Einzelbackends
übernimmt.
Das ConnectionWidget könnte einfach Buttons zum hinzufügen einer Datenquelle anbieten, was ein
Fenster mit allen anderen ConnectionWidgets öffnet. Hat man eine Quelle hinzugefügt, erscheint
ein weiterer Button, um das ganze zu wiederholen.
--> Das dürfte die am schnellsten umsetzbare Lösung sein. Erfordert lediglich von seiten der
Roboter-Software, dass die Debug-Level der Boards sich nicht überschneiden, aber das sollte eine
annehmbare Einschränkung sein.
--> Problematisch wird hier wieder das Testmenü...zumindest theoretisch. In der Praxis
dürfte es klappen.
--> Einfache Lösung, aber Support für mehrere getrennte Streams wäre wohl eleganter O:-)
==> GEHT NICHT, da an keiner Stelle garantiert wird, das tina-Pakete nicht vermengt werden
würden.
==> Support für mehrere getrennte Streams unverzichtbar


Neuer Ansatz:
In einem ConnectionString können beliebig viele Verbindungen codiert werden. Der Controller
öffnet die entsprechenden Backends. Für den Datenaustausch wird ein Kanalindex eingeführt,
der die Datenquelle/-herkunft kennzeichnet. Den Frontends bleibt es überlassen, was sie mit
den Daten tun. Um die Schnittstelle zum Frontend simpel zu halten, werden die Backends alle
mit dem Controller verbunden, welcher alle Daten an das Frontend weiterleitet, sodass wie
gehabt nur eine Signal-Slot-Verbindung pro Richtung für das Frontend nötig ist.
Multiple Verbindungen passen auch wunderbar zum generischen Anspruch der Console.
Multiple Frontends sind wahrscheinlich überflüssig, da diese zu verschieden sind und man dann
auch einfach zwei Consolen-Instanzen öffnen könnte.
Der Mehraufwand im Interface ist dann gar nicht so groß. Allenfalls wäre eine Anzeige sinnvoll,
ob das aktuell gewählte Frontend alle Datenströme verarbeiten kann, bzw. eine Anzeige wieviele
gerade offen sind (wäre für Plaintextfrontend und so interessant).
Indem man den Frontends die Entscheidung überlässt, ist auch das Testmenu-Problem gelöst:
bei 3 Kanälen werden entsprechend 3 Tabs anegzeigt, die man durchschalten kann und die Eingabe
geht immer zum richtigen Board.
Bei dem threadedFifo-Transport müsste man sich überlegen, ob und wie auch da mehrere Verbindungen
möglich/nötig sind.
Achja, lustig wäre noch so eine Ansicht mit einem kleinen Bandbreitendiagramm... (für jede
Verbindung).




Performance-Optimierung/Multi-Threading
--------------------------------------------------
Backends und Frontends evt. in verschiedene Threads
--> da gab es schon Versuche

Ziel ist letzlich immer, die Daten von der Datenquelle möglichst schnell
in den Backend-Puffer zu schaufeln. Von dort müssen die Daten häppchenweise
ans Frontend übergeben werden. Bzw. muss das Frontend die Daten in einen
eigenen Puffer kopieren und dann häppchenwiese anzeigen. Eine inkrementelle
Aktualisierung der Anzeige ohne "freeze" steht dabei im Vordergrund, selbst
wenn die Gesamtdauer der Anzeige dabei um 10-20 % länger dauert.

Derzeit ist das mit einem zero-Timer im Backend gelöst, was halbwegs funktioniert.
Dabei muss man aufpassen, da das Feldbus-Frontend dann zB nicht mehr funktioniert,
daher ist das für das SerialBackend deaktiviert.


Komprimierung
------------------------------------------
Bei den Roboter-Logs besteht ein ungeheures Einspar-Potenzial, wenn diese
server-seitig mit gzip komprimiert würden. (50-80 % Einsparung).
Im Base-Backend sollte geprüft werden, ob es sich um einen komprimierten
Datenstrom handelt, der dann transparent entschlüsselt werden sollte.

Die selbsttätige Erkennung klappt an sich nur beim File- und WebDAV-Backend, also
für die nicht-sequentiellen.

Für sequentielle Backends müsste man eine entsprechende Meta-Information übertragen
und es entstehen eine neue Klasse von Problemen (mir fehlen x Byte Daten um den Block
abzuschließen. Was tun? Warten? Mit Dummy-Byte auffüllen?)

Für letzteres könnte die QByteArray::qCompress-Funktion benutzt werden, für ersteres
die MiniZ-Bibliothek.
--> Implementierung der qCompress-Funktion erscheint mir nicht koscher, daher besser für
alles miniZ benutzen.


Der DebugServer sollte für jeden Datenkanal noch einen komprimierten aufmachen.
Gepuffert werden dann komprimierte und unkomprimierte Daten.
Die Blockerkennung sollte zeitgesteuert passieren, mit einer maximalen Blockgröße:
Block wird ab Erreichen einer gewissen Datenmenge oder nach Ablauf einer bestimmten
Zeit abgeschlossen.
Blöcke bestehen aus 0xFF 0xFF <Länge, 2 Byte, MSB markiert Kompression ja/nein> <deflate data>
Kompression macht wahrscheinlich erst ab 0,5 - 1 KB Sinn. Größenvergleich vorher nachher
ist sicher auch nicht ganz verkehrt.

Kompression sollte über das DeviceFile konfigurierbar sein:
 - aktiv/deaktiv
 - maximale Blockgröße (optional)
 - timeout (optional)
 - maximale Größe des komprimierten Puffers

Die Änderung sollte abwärtskompatibel sein: alte Clients sollten einfach die
unkomprimierten Kanäle weiter benutzen können. Das lässt sich nur erreichen,
indem die nötigen Infos separat in einem eigenen "compressed-devices"-Block
überträgt.
In neuen Versionen kann mit einem Häkchen im ConnectionWidget die Kompression
aktiviert werden.
Da das tcpBackend allein keine Möglichkeit hat die Kompressio zu erkennen, muss
dies im connectionString codiert werden, wahrscheinlich mit einem Parameter
der Art: compression=1


CLI-Interface
-------------------------------------------
Man könnte die Flexibilität der Console auf ein weiteres Level heben,
indem CLI-Frontends eingeführt werden. Während die Umsetzung mit der
QCommandLineParser Klasse gut machbar ist, stellt sich hier eher die Frage
ob der Vorteil einer zentralen Anwendung für alles (die Console würde dann
den BMax-Launcher und den TURAG-Flasher ersetzen) den Nachteil aufwiegt,
dass die Konsole relativ viele Abhängigkeiten hat und schwerer zu compilieren ist
als die genannten Mini-Programme.


Feldbus
----------------------------------------
Feldbus-Bug in Windows (waitForReady kriegt einen timeout, obwohl Daten da sind)
wurde umgangen, sodass jetzt auch neuere Qt-Versionen möglich sind.
Allerdings ist das Ganze nicht sehr elegant. Abhilfe wird wohl erst eine Variante
der Console schaffen, wo die Backends in einem dedizierten Thread laufen. Dann wäre
es möglich, den Frontends Daten über zwei Varianten bereitzustellen: herkömmlich über
das Signal-Slot-Modell oder alternativ über zwei FIFOs, deren Zugriff mit Mutexes
synchronsiert wird und für das Frontend mit Condition Variablen blockierend gestaltet
werden kann.

- Standardview, was Adresse und Checksumme übernimmt. Der User kann dann den Datenteil
der Pakete bestimmen. Antwortpakete werden auch entsprechend ausgewertet. Sollte
vom Hex-/Hterm-View abgeleitet werden

Sniffing-View: lediglich Darstellung der mitgehörten Pakete --> GEHT NICHT,
da sich Pakete nicht trennen lassen


Optionen
-------------------------------------------
Lange Zeit waren alle Optionen transparent gespeichert. Das hat aber zumindest beim
Datagraph für Performance-Probleme gesorgt. Außerdem sorgt es für merkwürdiges Verhalten
wenn mehr als eine Instanz benutzt wird.
Vielleicht lieber einen Options-Dialog bereitstellen, in dem Standard-Einstellungen
bearbeitet werden können, die nicht transparent gespeichert werden können?



=====================================================
=====================================================
GERINGE PRIORITÄT
=====================================================
=====================================================

Meldungen/Log
-----------------------------
 - Anzeige beschleunigen --> übliche Performance-Probleme bei großen Anzahlen
   und hohem Meldungsaufkommen
 - Anzeige moderner gestalten, Auftritt einer Meldung deutlicher machen
 - sowas in der Art wie die Notification-Anzeige in KDE wäre cool
--> aber sehr aufwändig
--> und wohl von geringem praktischen Nutzen
--> derzeitiger Stand sollte ausreichen


